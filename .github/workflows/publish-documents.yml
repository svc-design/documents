---
name: Build and Publish Documents

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch: {}  # Manual trigger

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project:
          - Personal
          - LandingZone
          - Keycloak
          - TechExploration
          - Observability/CN
          - Linux-K8S-OPS/CN
          - interview-qa/CN
          - The-IndieDeveloper-Fullstack-Roadmap/EN
          - The-IndieDeveloper-Fullstack-Roadmap/CN
    env:
      TAG_NAME: ${{ matrix.project }}-v${{ github.run_number }}-${{ github.run_id }}
      RSYNC_SSH_KEY: ${{ secrets.RSYNC_SSH_KEY }}
      VPS_HOST: ${{ secrets.VPS_HOST }}
      RSYNC_SSH_USER: ${{ secrets.RSYNC_SSH_USER }}
      REMOTE_ROOT: ${{ secrets.REMOTE_ROOT }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up build environment
        run: |
          sudo apt-get update
          sudo apt-get install -y texlive-xetex texlive-fonts-recommended texlive-lang-chinese fonts-noto-cjk fonts-dejavu
          sudo apt-get install -y pandoc make

      - name: Build documents using Makefile
        run: make -C "${{ matrix.project }}"

      - name: Prepare artifact name
        run: |
          ARTIFACT_NAME="${PROJECT//\//-}-docs"
          echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> "$GITHUB_ENV"
        env:
          PROJECT: ${{ matrix.project }}

      - name: Upload PDFs and DOCX files to GitHub Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: |
            ${{ matrix.project }}/*.pdf
            ${{ matrix.project }}/*.docx

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.TAG_NAME }}
          name: Release ${{ env.TAG_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload PDFs and DOCX files to Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.TAG_NAME }}
          files: |
            ${{ matrix.project }}/*.pdf
            ${{ matrix.project }}/*.docx
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Ensure deps (rsync, ssh)
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y rsync openssh-client

      - name: Init SSH
        run: |
          set -euo pipefail
          mkdir -p ~/.ssh
          printf '%s\n' "$RSYNC_SSH_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H "$VPS_HOST" >> ~/.ssh/known_hosts

      - name: Determine remote directories
        run: |
          set -euo pipefail
          PROJECT="${{ matrix.project }}"
          DOC_NAME="${PROJECT%%/*}"
          if [[ "$PROJECT" == "$DOC_NAME" ]]; then
            LANG_SEGMENT="EN"
          else
            LANG_SEGMENT="${PROJECT#*/}"
            LANG_SEGMENT="${LANG_SEGMENT%%/*}"
          fi
          LANG_SEGMENT="${LANG_SEGMENT^^}"
          VERSION_TAG="v${GITHUB_RUN_NUMBER}-${GITHUB_RUN_ID}"
          REMOTE_DOC_DIR="${REMOTE_ROOT}/${DOC_NAME}"
          REMOTE_VERSION_DIR="${REMOTE_DOC_DIR}/${LANG_SEGMENT}-${VERSION_TAG}"
          {
            echo "REMOTE_DOC_DIR=${REMOTE_DOC_DIR}"
            echo "REMOTE_VERSION_DIR=${REMOTE_VERSION_DIR}"
          } >> "$GITHUB_ENV"
          echo "Document directory: ${REMOTE_DOC_DIR}"
          echo "Version directory: ${REMOTE_VERSION_DIR}"

      - name: Rsync release assets to remote
        run: |
          set -euo pipefail
          shopt -s nullglob
          ssh -i ~/.ssh/id_rsa "${RSYNC_SSH_USER}@${VPS_HOST}" "mkdir -p '${REMOTE_VERSION_DIR}'"
          echo "Rsync -> ${VPS_HOST}:${REMOTE_VERSION_DIR}/"
          PROJECT="${{ matrix.project }}"
          files=( "$PROJECT"/*.pdf "$PROJECT"/*.html )
          if [ ${#files[@]} -eq 0 ]; then
            echo "No PDF or HTML artifacts to sync for ${PROJECT}"
          else
            rsync -av -e "ssh -i ~/.ssh/id_rsa" \
              "${files[@]}" \
              "${RSYNC_SSH_USER}@${VPS_HOST}:${REMOTE_VERSION_DIR}/"
          fi
